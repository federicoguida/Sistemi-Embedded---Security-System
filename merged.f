HEX
FE000000 CONSTANT PERIBASE

: '(' [ CHAR ( ] LITERAL ;
: ')' [ CHAR ) ] LITERAL ;
: '"' [ CHAR " ] LITERAL ;

: ( IMMEDIATE 1 BEGIN KEY DUP '(' = IF DROP 1+ ELSE ')' = IF 1- THEN THEN DUP 0= UNTIL DROP ;
: ALIGNED ( c-addr -- a-addr )
  3 + 3 INVERT AND ;
: ALIGN HERE @ ALIGNED HERE ! ;
: C, HERE @ C! 1 HERE +! ;
: H/L AND 0 > ;
: S" IMMEDIATE ( -- addr len )
	STATE @ IF
		' LITS , HERE @ 0 ,
		BEGIN KEY DUP '"'
                <> WHILE C, REPEAT
		DROP DUP HERE @ SWAP - 4- SWAP ! ALIGN
	ELSE
		HERE @
		BEGIN KEY DUP '"'
                <> WHILE OVER C! 1+ REPEAT
		DROP HERE @ - HERE @ SWAP
	THEN
;
: ." IMMEDIATE ( -- )
	STATE @ IF
		[COMPILE] S" ' TELL ,
	ELSE
		BEGIN KEY DUP '"' = IF DROP EXIT THEN EMIT AGAIN
	THEN ;

\*****se-ansforth*****
: JF-HERE HERE ;
: JF-CREATE CREATE ;
: JF-FIND FIND ;
: JF-WORD WORD ;
: HERE JF-HERE @ ;
: ALLOT HERE + JF-HERE ! ;
: ['] ' LIT , ; IMMEDIATE
: ' JF-WORD JF-FIND >CFA ;
: CELL+ 4 + ;
: ALIGNED 3 + 3 INVERT AND ;
: ALIGN JF-HERE @ ALIGNED JF-HERE ! ;
: DOES>CUT LATEST @ >CFA @ DUP JF-HERE @ > IF JF-HERE ! ;
: CREATE JF-WORD JF-CREATE DOCREATE , ;
: (DODOES-INT) ALIGN JF-HERE @ LATEST @ >CFA ! DODOES> ['] LIT ,  LATEST @ >DFA , ;
: (DODOES-COMP) (DODOES-INT) ['] LIT , , ['] FIP! , ;
: DOES>COMP ['] LIT , HERE 3 CELLS + , ['] (DODOES-COMP) , ['] EXIT , ;
: DOES>INT (DODOES-INT) LATEST @ HIDDEN ] ;
: DOES> STATE @ 0= IF DOES>INT ELSE DOES>COMP THEN ; IMMEDIATE
DROP

: MASK ( pos -- ) 1 SWAP LSHIFT ;
: GET_BIT ( posBit addr -- value ) @ SWAP RSHIFT 2 MOD  ;
: PIN ( addr -- addr ) DUP CONSTANT 4 + ;
: SKIP ( addr -- addr ) 4 + ;
: RETURN_TRUE ( -- value value ) 1 1 ;
: RETURN_FALSE ( -- value value ) 0 1 ;
: INCREMENT ( addr -- ) DUP @ 1 + SWAP ! ;
: DECREMENT ( addr -- ) DUP @ 1 - SWAP ! ;
: INCREMENT_RETURN ( addr -- value ) DUP @ 1 + OVER ! @ ;
: 4DUP ( n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2 n3 n4) 2OVER 2OVER ;
: -6ROT ( n1 n2 n3 n4 n5 n6 -- n6 n1 n2 n3 n4 n5) SWAP >R SWAP >R SWAP >R -ROT R> R> R> ;
: ATOI ( ascii -- number ) 30 - ;
VARIABLE OP1_L
VARIABLE OP1_H
VARIABLE OP2
VARIABLE OU_LOW
VARIABLE OU_HIGH

CREATE UDIV
\00008000 <_start>:
e59f20ec ,	\ldr	r2, [pc, #236]	; 80f4 <addr_OP1_L>
e59f30ec ,	\ldr	r3, [pc, #236]	; 80f8 <addr_OP1_H>
e5922000 ,	\ldr	r2, [r2]
e5933000 ,	\ldr	r3, [r3]
e59f40e4 ,	\ldr	r4, [pc, #228]	; 80fc <addr_OP2>
e5944000 ,	\ldr	r4, [r4]
e3a00000 ,	\mov	r0, #0
e3a01000 ,	\mov	r1, #0
e3a05000 ,	\mov	r5, #0
e3a06000 ,	\mov	r6, #0
e3a07000 ,	\mov	r7, #0
e3a08001 ,	\mov	r8, #1
\00008030 <_label>:
e3530000 ,	\cmp	r3, #0
8a000000 ,	\bhi	803c <_case1>
da000003 ,	\ble	804c <_case2>
\0000803c <_case1>:
e1510003 ,	\cmp	r1, r3
8a000004 ,	\bhi	8058 <_greater>
0a000013 ,	\beq	8098 <_same>
3a00000d ,	\bcc	8084 <_minus>
\0000804c <_case2>:
e736f412 ,	\udiv	r6, r2, r4
e0870006 ,	\add	r0, r7, r6
e12fff1e ,	\bx	lr
\00008058 <_greater>:
e2455001 ,	\sub	r5, r5, #1
e1a08518 ,	\lsl	r8, r8, r5
e0810894 ,	\umull	r0, r1, r4, r8
e0522000 ,	\subs	r2, r2, r0
e0c33001 ,	\sbc	r3, r3, r1
e0877008 ,	\add	r7, r7, r8
e3a08001 ,	\mov	r8, #1
e3a05000 ,	\mov	r5, #0
e3a00000 ,	\mov	r0, #0
e3a01000 ,	\mov	r1, #0
eaffffea ,	\b	8030 <_label>
\00008084 <_minus>:
e2855001 ,	\add	r5, r5, #1
e1a08518 ,	\lsl	r8, r8, r5
e0810894 ,	\umull	r0, r1, r4, r8
e3a08001 ,	\mov	r8, #1
eaffffe8 ,	\b	803c <_case1>
\00008098 <_same>:
e1500002 ,	\cmp	r0, r2
8a000000 ,	\bhi	80a4 <_op1>
da00000a ,	\ble	80d0 <_op2>
\000080a4 <_op1>:
e2455001 ,	\sub	r5, r5, #1
e1a08518 ,	\lsl	r8, r8, r5
e0810894 ,	\umull	r0, r1, r4, r8
e0522000 ,	\subs	r2, r2, r0
e0c33001 ,	\sbc	r3, r3, r1
e0877008 ,	\add	r7, r7, r8
e3a08001 ,	\mov	r8, #1
e3a05000 ,	\mov	r5, #0
e3a00000 ,	\mov	r0, #0
e3a01000 ,	\mov	r1, #0
eaffffd7 ,	\b	8030 <_label>
\000080d0 <_op2>:
e1a08518 ,	\lsl	r8, r8, r5
e0522000 ,	\subs	r2, r2, r0
e0c33001 ,	\sbc	r3, r3, r1
e0877008 ,	\add	r7, r7, r8
e3a08001 ,	\mov	r8, #1
e3a05000 ,	\mov	r5, #0
e3a00000 ,	\mov	r0, #0
e3a01000 ,	\mov	r1, #0
eaffffce ,	\b	8030 <_label>
\DATA
OP1_L ,
OP1_H ,
OP2 ,
DOES> JSR ;

: UM/ ( div1_lo div1_hi div2 -- quotient )
    OP2 ! OP1_H ! OP1_L ! UDIV ;

CREATE TIME
\00008000 <_start>:
e59f001c ,	\ldr	r0, [pc, #28]	; 8024 <addr_SYSTIMER_CLO>
e1c000d0 ,	\ldrd	r0, [r0]
e59f200c ,	\ldr	r2, [pc, #12]	; 801c <addr_OU_LOW>
e59f300c ,	\ldr	r3, [pc, #12]	; 8020 <addr_OU_HIGH>
e5820000 ,	\str	r0, [r2]
e5831000 ,	\str	r1, [r3]
e12fff1e ,	\bx	lr
\DATA
OU_LOW ,
OU_HIGH ,
fe003004 ,
fe003008 ,
DOES> JSR ;

: TIME@ ( -- val_lo val_hi )
    TIME DROP OU_LOW @ OU_HIGH @ ;
\*********GPIO*********
: GPIO{ ( addr -- ) PERIBASE 200034 + ;
: }GPIO ( addr -- ) DROP ;
GPIO{
PIN GPLEV0 PIN GPLEV1 SKIP
PIN GPEDS0 PIN GPEDS1 SKIP
PIN GPREN0 PIN GPREN1 SKIP
PIN GPFEN0 PIN GPFEN1 SKIP
PIN GPHEN0 PIN GPHEN1 SKIP
PIN GPLEN0 PIN GPLEN1
}GPIO

: GPON ( pin -- ) 20 /MOD 4 * PERIBASE 20001C + + SWAP MASK SWAP ! ;
: GPOFF ( pin -- ) 20 /MOD 4 * PERIBASE 200028 + + SWAP MASK SWAP ! ;
: GPFSEL ( gpioPinNumber -- addr_gpfsel clr_value_gpfsel offset_base )
    A /MOD 4 * PERIBASE 200000 + + SWAP 3 * DUP 7 SWAP LSHIFT ROT DUP @ ROT INVERT AND ROT ;
: GPIO_INPUT ( addr_gpfsel clr_value_gpfsel offset_base -- )
    1 SWAP LSHIFT INVERT AND SWAP ! ;
: GPIO_OUTPUT ( addr_gpfsel clr_value_gpfsel offset_base -- )
    1 SWAP LSHIFT OR SWAP ! ;
: GPIO_AF0 ( addr_gpfsel clr_value_gpfsel offset_base -- )
    1 SWAP 2 + LSHIFT OR SWAP ! ;
: EVENT_DETECT ( pin -- event )
    MASK GPEDS0 @ AND 0 <> -1 = ;
: PIN_LEVEL ( pin -- level )
    MASK GPLEV0 @ AND 0 = IF 0 ELSE 1 THEN ;
: CLEAR_EVENT ( pin -- )
    MASK GPEDS0 @ OR GPEDS0 ! ;
: FALLING_EDGE_DETECT_ENABLE ( pin -- )
    MASK GPFEN0 @ OR GPFEN0 ! ;
\*************************
\*********TIMER*********
: TIMER{ ( addr -- ) PERIBASE 3000 + ;
: }TIMER ( addr -- ) DROP ;
TIMER{
PIN SYSTEMTIMER_CS
    PIN SYSTEMTIMER_CLO PIN SYSTEMTIMER_CHI
}TIMER

VARIABLE INITIAL_TIME
VARIABLE TIME_TEMP

: MSEC ( u_sec -- m_sec ) 3E8 * ;
: SEC ( u_sec -- sec ) F4240 * ;
: USEC_TIMES ( u_sec -- )
    SYSTEMTIMER_CLO @ INITIAL_TIME !
    BEGIN SYSTEMTIMER_CLO @ INITIAL_TIME @ - OVER SWAP - 0 <
    UNTIL DROP ;
: MSEC_TIMES ( m_sec -- ) MSEC USEC_TIMES ;
: SEC_TIMES ( sec -- ) SEC USEC_TIMES ;

: 2NUMBER_STORE ( value pos1 pos2 -- )
    >R >R A /MOD SWAP
    30 + TIME_TEMP @ R> + C! 30 + TIME_TEMP @ R> + C! ;

: 3NUMBER_STORE ( value pos1 pos2 pos3 -- )
    >R >R >R 64 /MOD SWAP A /MOD SWAP
    30 + TIME_TEMP @ R> + C! 30 + TIME_TEMP @ R> + C! 30 + TIME_TEMP @ R> + C! ;

: DATETIME ( -- addr len)
    HERE 10 ALLOT TIME_TEMP !
    TIME@ F4240 UM/
    3C /MOD SWAP F E 2NUMBER_STORE
    3A D TIME_TEMP @ + C!
    3C /MOD SWAP C B 2NUMBER_STORE
    3A A TIME_TEMP @ + C!
    18 /MOD SWAP 9 8 2NUMBER_STORE
    2F 7 TIME_TEMP @ + C!
    16D /MOD SWAP 6 5 4 3NUMBER_STORE
    2F 3 TIME_TEMP @ + C!
    2 1 0 3NUMBER_STORE
    TIME_TEMP @ 10 ;
\*********I2C INTERFACE*********
: I2C{ ( -- addr ) PERIBASE 804000 + ;
: }I2C ( addr -- ) DROP ;
I2C{
PIN BSC1C PIN BSC1S PIN BSC1DLEN
PIN BSC1A PIN BSC1FIFO PIN BSC1DIV
PIN BSC1DEL }I2C

\*- I2C operazioni -*
: I2C_ENABLE? ( -- ) F BSC1C GET_BIT . ;
: I2C_ON ( -- ) BSC1C @ 8000 INVERT AND 8000 OR BSC1C ! ;
: I2C_OFF ( -- ) BSC1C @ 8000 INVERT AND 0 OR BSC1C ! ;
: I2C_START ( -- ) BSC1C @ 80 OR BSC1C ! ;
: I2C_WRITE ( -- ) BSC1C @ 0 INVERT AND 0 OR BSC1C ! ;
: I2C_CLEAR ( -- ) BSC1C @ 20 OR BSC1C ! ;
: I2C_STATUS ( -- ) BSC1S @ U. ;
: I2C_DLEN ( n -- ) BSC1DLEN ! ;
: I2C_SETSLAVE ( addr -- ) BSC1A ! ;
: I2C_GETSLAVE ( -- ) BSC1A @ U. ;
: I2C_FIFO ( data -- ) BSC1FIFO ! ;
: I2C_DONE? ( -- bit ) 1 BSC1S GET_BIT ;
: I2C_TA? ( -- bit ) 0 BSC1S GET_BIT ;
: I2C_RESETDONE ( -- ) BSC1S @ 2 INVERT AND 2 OR BSC1S ! ;
\************************
: GPIO_I2C ( -- )
    2 GPFSEL GPIO_AF0
    3 GPFSEL GPIO_AF0 ;

\ aspetta fino all'effettivo invio del messaggio
: WAIT_DONE ( -- )
  BEGIN I2C_DONE? 1 = UNTIL ;
 \ aspetta fino al trasferimento attivo
: WAIT_TA ( -- )
  BEGIN I2C_TA? 0= UNTIL ;

: BSC1_ENABLE ( -- ) GPIO_I2C I2C_ON ;

: WRITE_I2C ( data slave len -- )
    I2C_CLEAR
    I2C_RESETDONE
    I2C_DLEN
    I2C_SETSLAVE
    I2C_FIFO
    I2C_WRITE
    I2C_START
    WAIT_DONE
    WAIT_TA ;
\*********LCD*********
27 CONSTANT LCD_SLAVET \PCF8574T
C CONSTANT CMD_HIGH
8 CONSTANT CMD_LOW
VARIABLE LCD_COUNTER
VARIABLE LCD_TEMP

: SEND ( -- ) LCD_SLAVET 1 WRITE_I2C ;
: SEND_VALUE ( -- ) OR 200 USEC_TIMES SEND ;
: SEND_PREPARE ( cod_Ascii -- data[3-0] data[7-4] )
    DUP 10 / 10 * SWAP OVER - 10 * SWAP ;
: SEND_COMMAND ( cod_Ascii boolean -- )
    >R SEND_PREPARE
    DUP CMD_HIGH RSP@ @ + SEND_VALUE CMD_LOW RSP@ @ + SEND_VALUE
    DUP CMD_HIGH RSP@ @ + SEND_VALUE CMD_LOW RSP@ @ + SEND_VALUE R> DROP ;
: SEND_STRING ( addr len -- )
    0 LCD_COUNTER !
    LCD_TEMP !
    >R BEGIN
    RSP@ @ LCD_COUNTER @ + C@ 1 SEND_COMMAND LCD_COUNTER INCREMENT_RETURN LCD_TEMP @ =
    UNTIL R> DROP ;

\ COMMANDS SET
: FUNCTION_SET ( -- ) 2C SEND 200 USEC_TIMES 28 SEND ;
: DISPLAY_ON ( -- ) F 0 SEND_COMMAND ;
: CLEAR_DISPLAY ( -- ) 1 0 SEND_COMMAND ;
: DISPLAY_SHIFT ( -- ) 1F 0 SEND_COMMAND ;
: ENTRY_MODE ( -- ) 6 0 SEND_COMMAND ;
: DISPLAY_R2 ( -- ) C0 0 SEND_COMMAND ;
: DISPLAY_R1 ( -- ) 80 0 SEND_COMMAND ;

\ Display initializzation
: INIT_LCD ( -- )
    FUNCTION_SET \ send 2C 28 FUNCTION_SET[4bit,2lines,5x8dots]
    DISPLAY_ON \ send C 8 FC F8 DIPLAYON CURSORON BLINKINGON
    ENTRY_MODE ;
\*********KEYPAD*********
\COLUMNS
10 CONSTANT C1
16 CONSTANT C2
1B CONSTANT C3
A CONSTANT C4
\ROWS
12 CONSTANT R1
17 CONSTANT R2
18 CONSTANT R3
19 CONSTANT R4

VARIABLE PASSWORD_FLAG
VARIABLE KEY_COUNTER
VARIABLE KEY_TEMP

: PRESSED ( pin -- flag )
    PIN_LEVEL 1 = ;
: CHECK_EMIT ( -- flag )
    PASSWORD_FLAG @
    IF 2A 1 SEND_COMMAND ELSE DUP 1 SEND_COMMAND THEN ;
: KEYPAD_FALLING ( register -- )
    BEGIN DUP EVENT_DETECT UNTIL 1F4 MSEC_TIMES CLEAR_EVENT ;
: ROW_PRESSED ( cod_ascii, row -- )
    DUP PRESSED IF KEYPAD_FALLING KEY_COUNTER INCREMENT CHECK_EMIT
    ELSE 2DROP THEN ;

: ROWS_CHECK ( v1 v2 v3 v4 -- value )
    >R >R >R >R
    R> R1 ROW_PRESSED R> R2 ROW_PRESSED 
    R> R3 ROW_PRESSED R> R4 ROW_PRESSED ;

: COLS_CHECK ( -- values )
  C1 GPON
  31 34 37 2A ROWS_CHECK
  C1 GPOFF
  C2 GPON
  32 35 38 30 ROWS_CHECK
  C2 GPOFF
  C3 GPON
  33 36 39 23 ROWS_CHECK
  C3 GPOFF 
  C4 GPON
  41 42 43 44 ROWS_CHECK
  C4 GPOFF ;

: ROW_FALLING ( -- )
    R1 FALLING_EDGE_DETECT_ENABLE
    R2 FALLING_EDGE_DETECT_ENABLE
    R3 FALLING_EDGE_DETECT_ENABLE
    R4 FALLING_EDGE_DETECT_ENABLE ;

: KEYPAD_INIT ( -- )
    ROW_FALLING
    12 GPFSEL GPIO_INPUT \row1 Port GPIO18
    17 GPFSEL GPIO_INPUT \row2 Port GPIO23
    18 GPFSEL GPIO_INPUT \row3 Port GPIO24
    19 GPFSEL GPIO_INPUT \row4 Port GPIO25
    10 GPFSEL GPIO_OUTPUT \Col Port GPIO16
    16 GPFSEL GPIO_OUTPUT \Col Port GPIO22
    1B GPFSEL GPIO_OUTPUT \Col Port GPIO27
    A GPFSEL GPIO_OUTPUT \Col Port GPIO10
    C1 GPOFF
    C2 GPOFF
    C3 GPOFF
    C4 GPOFF ;

: READ_VALUES ( value flag -- )
    PASSWORD_FLAG ! 1 KEY_COUNTER !
    KEY_TEMP ! BEGIN
    COLS_CHECK KEY_TEMP @ KEY_COUNTER @ <
    UNTIL ;
3E8FA000 CONSTANT FRAMEBUFFER_HDMI
FRAMEBUFFER_HDMI 2FFFFFF + CONSTANT FRAMEBUFFER_HDMIMAX
3EBDA000 CONSTANT MAXROW
1000 CONSTANT HEIGHT
4 CONSTANT WIDTH

VARIABLE ROW
VARIABLE COLOR
VARIABLE POINTER
VARIABLE HDMI_COUNTER
VARIABLE STR_LEN

\Word utilizzate per muoversi all'interno del framebuffer.
: NORTH ( color addr -- ) HEIGHT - 2DUP ! ;
: SUD ( color addr -- ) HEIGHT + 2DUP ! ;
: EAST ( color addr -- ) WIDTH + 2DUP ! ;
: OVEST ( color addr -- ) WIDTH - 2DUP ! ;
: NORTHEAST ( color addr -- ) HEIGHT - WIDTH + 2DUP ! ;
: NORTHOVEST ( color addr -- ) HEIGHT - WIDTH - 2DUP ! ;
: SUDEAST ( color addr -- ) HEIGHT + WIDTH + 2DUP ! ;
: SUDOVEST ( color addr -- ) HEIGHT + WIDTH - 2DUP ! ;
: PR ( color addr -- ) 2DUP ! WIDTH + ;
: PD ( color addr -- ) 2DUP ! WIDTH + ;
: UP ( addr value -- addr ) BEGIN SWAP HEIGHT - SWAP 1 - DUP 0 = UNTIL DROP ;
: DOWN ( addr value -- addr ) BEGIN SWAP HEIGHT + SWAP 1 - DUP 0 = UNTIL DROP ;
: LEFT ( addr value -- addr ) BEGIN SWAP WIDTH - SWAP 1 - DUP 0 = UNTIL DROP ;
: RIGHT ( addr value -- addr ) BEGIN SWAP WIDTH + SWAP 1 - DUP 0 = UNTIL DROP ;
: NEXT_CHAR ( addr -- addr )  6 UP 3 RIGHT ;
\*****************************
: SP ( -- ) 9 RIGHT ;

: !! ( color, addr -- color, addr )
    1 RIGHT EAST SUD SUD SUD 2 DOWN
    SUD 2 RIGHT NEXT_CHAR ;

: QM ( color, addr -- color, addr )
    EAST SUD SUD 2 UP 1 RIGHT
    EAST SUD SUD 4 DOWN 1 RIGHT NEXT_CHAR ;

: !# ( color, addr -- color, addr )
    2DUP 1 DOWN SUD EAST EAST EAST EAST
    1 DOWN 4 LEFT SUD EAST EAST EAST EAST 2DROP
    EAST SUD SUD SUD SUD SUD SUD 6 UP 1 RIGHT
    EAST SUD SUD SUD SUD SUD SUD 1 RIGHT
    NEXT_CHAR ;

: !$ ( color, addr -- color, addr )
    2DUP 4 RIGHT SUD OVEST OVEST OVEST
    SUDOVEST SUDEAST EAST EAST SUDEAST
    SUDOVEST OVEST OVEST OVEST 2DROP
    1 RIGHT EAST SUD SUD SUD SUD SUD SUD
    2 RIGHT NEXT_CHAR ;

: !% ( color, addr -- color, addr )
    2DUP ! SUD EAST NORTH 3 RIGHT
    SUD SUDOVEST SUDOVEST SUDOVEST SUDOVEST
    2 RIGHT EAST SUD NORTHEAST SUD NEXT_CHAR ;

: !& ( color, addr -- color, addr )
    2DUP EAST EAST SUDEAST
    SUDOVEST SUDOVEST SUDOVEST SUD
    SUDEAST EAST NORTHEAST NORTHEAST 2DROP
    SUD SUD SUDEAST SUDEAST SUDEAST SUDEAST
    NEXT_CHAR ;

: !' ( color, addr -- color, addr )
    EAST EAST SUD SUDOVEST 4 DOWN 3 RIGHT NEXT_CHAR ;

: !( ( color, addr -- color, addr )
    2 RIGHT EAST SUDOVEST SUDOVEST SUD SUD
    SUDEAST SUDEAST 1 RIGHT NEXT_CHAR ;

: !) ( color, addr -- color, addr )
    EAST SUDEAST SUDEAST SUD SUD
    SUDOVEST SUDOVEST 3 RIGHT NEXT_CHAR ;

: !* ( color, addr -- color, addr )
    2DUP 2DUP 1 DOWN SUD SUDEAST SUDOVEST 2DROP
    2 RIGHT SUD SUD SUD SUD SUD 2DROP 1 DOWN 4 RIGHT
    SUD SUDOVEST SUDEAST 2 DOWN NEXT_CHAR ;

: !+ ( color, addr -- color, addr )
    2DUP 2 DOWN SUD EAST EAST EAST EAST 2DROP
    2 RIGHT SUD SUD SUD SUD SUD 1 DOWN 2 RIGHT NEXT_CHAR ;

: !, ( color, addr -- color, addr )
    3 DOWN SUDEAST EAST SUD SUDOVEST
    3 RIGHT NEXT_CHAR ;

: !- ( color, addr -- color, addr )
    2 DOWN SUD EAST EAST EAST EAST
    3 DOWN NEXT_CHAR ;

: !. ( color, addr -- color, addr )
    6 DOWN EAST NORTH EAST SUD 2 RIGHT NEXT_CHAR ;

: !/ ( color, addr -- color, addr )
    4 DOWN SUD NORTHEAST NORTHEAST
    NORTHEAST NORTHEAST 5 DOWN NEXT_CHAR ;

: !0 ( color, addr -- color, addr )
    2DUP EAST EAST EAST 2DROP
    SUD SUD SUD SUD SUD
    NORTHEAST NORTHEAST NORTHEAST NORTHEAST
    SUD SUD SUD SUD
    SUDOVEST OVEST OVEST 3 RIGHT NEXT_CHAR ;

: !1 ( color, addr -- color, addr )
    1 RIGHT EAST SUDOVEST EAST
    SUD SUD SUD SUD
    SUDOVEST EAST EAST 1 RIGHT NEXT_CHAR ;

: !2 ( color, addr -- color, addr )
    SUD NORTHEAST EAST EAST
    SUDEAST SUD
    SUDOVEST SUDOVEST SUDOVEST
    SUDOVEST EAST EAST EAST EAST NEXT_CHAR ;

: !3 ( color, addr -- color, addr )
    2DUP ! EAST EAST EAST EAST
    SUDOVEST SUDOVEST SUDEAST SUDEAST SUD
    SUDOVEST OVEST OVEST NORTHOVEST 1 DOWN 4 RIGHT NEXT_CHAR ;

: !4 ( color, addr -- color, addr )
    2 RIGHT EAST SUDOVEST SUDOVEST SUDOVEST SUD
    EAST EAST EAST EAST 3 UP OVEST
    SUD SUD SUD SUD SUD 1 RIGHT NEXT_CHAR ;

: !5 ( color, addr -- color, addr )
    4 RIGHT 2DUP ! OVEST OVEST OVEST OVEST
    SUD SUD EAST EAST EAST
    SUDEAST SUD SUD
    SUDOVEST OVEST OVEST NORTHOVEST 1 DOWN 4 RIGHT NEXT_CHAR ;

: !6 ( color, addr -- color, addr )
    4 RIGHT OVEST OVEST SUDOVEST SUDOVEST
    SUD SUD SUD SUDEAST EAST EAST
    NORTHEAST NORTH NORTHOVEST
    OVEST OVEST 3 DOWN 3 RIGHT NEXT_CHAR ;

: !7 ( color, addr -- color, addr )
    2DUP ! EAST EAST EAST EAST
    SUD SUDOVEST SUDOVEST SUDOVEST
    SUD SUD 3 RIGHT NEXT_CHAR ;

: !8 ( color, addr -- color, addr )
    3 DOWN NORTH NORTH NORTHEAST EAST EAST
    SUDEAST SUD SUDOVEST OVEST OVEST
    SUDOVEST SUD SUDEAST EAST EAST
    NORTHEAST NORTH 2 DOWN NEXT_CHAR ;

: !9 ( color, addr -- color, addr )
    2 DOWN 3 RIGHT EAST NORTH NORTHOVEST OVEST OVEST
    SUDOVEST SUD SUDEAST EAST EAST EAST
    SUD SUDOVEST SUDOVEST OVEST 3 RIGHT NEXT_CHAR ;

: !: ( color, addr -- color, addr )
    2DUP SUDEAST SUD EAST NORTH 2DROP
    3 DOWN SUDEAST SUD NORTHEAST SUD
    1 DOWN 2 RIGHT NEXT_CHAR ;

: !; ( color, addr -- color, addr )
    SUDEAST EAST SUD OVEST 1 DOWN
    SUD EAST SUD SUDOVEST 3 RIGHT NEXT_CHAR ;

: !< ( color, addr -- color, addr )
    2 RIGHT EAST SUDOVEST SUDOVEST SUDOVEST
    SUDEAST SUDEAST SUDEAST 1 RIGHT NEXT_CHAR ;

: != ( color, addr -- color, addr )
    2DUP 1 DOWN SUD EAST EAST EAST EAST 2DROP
    3 DOWN SUD EAST EAST EAST EAST
    2 DOWN NEXT_CHAR ;

: !> ( color, addr -- color, addr )
    EAST SUDEAST SUDEAST SUDEAST
    SUDOVEST SUDOVEST SUDOVEST 3 RIGHT NEXT_CHAR ;

: !? ( color, addr -- color, addr )
    SUD NORTHEAST EAST EAST SUDEAST
    SUD SUDOVEST SUDOVEST 1 DOWN
    SUD 2 RIGHT NEXT_CHAR ;

: !@ ( color, addr -- color, addr )
    SUD NORTHEAST EAST EAST SUDEAST
    SUD SUD SUD SUD SUDOVEST OVEST
    OVEST NORTHOVEST NORTH NORTHEAST
    EAST SUD SUD 1 DOWN 2 RIGHT NEXT_CHAR ;

: !A ( color, addr -- color, addr )
    2DUP 3 DOWN 1 RIGHT SUD EAST EAST 2DROP
    7 DOWN NORTH NORTH NORTH NORTH NORTH NORTH
    NORTHEAST EAST EAST SUDEAST
    SUD SUD SUD SUD SUD NEXT_CHAR ;

: !B ( color, addr -- color, addr )
    2 DOWN 1 RIGHT SUD EAST EAST NORTHEAST NORTH
    NORTHOVEST OVEST OVEST OVEST
    SUD SUD SUD SUD SUD SUD
    EAST EAST EAST NORTHEAST NORTH
    2 DOWN NEXT_CHAR ;

: !C ( color, addr -- color, addr )
    1 DOWN 3 RIGHT EAST NORTHOVEST OVEST OVEST
    SUDOVEST SUD SUD SUD SUD
    SUDEAST EAST EAST NORTHEAST
    1 DOWN NEXT_CHAR ;

: !D ( color, addr -- color, addr )
    4 DOWN 3 RIGHT SUD NORTHEAST NORTH NORTH
    NORTHOVEST NORTHOVEST OVEST OVEST
    SUD SUD SUD SUD SUD SUD
    EAST EAST 2 RIGHT NEXT_CHAR ;

: !E ( color, addr -- color, addr )
    2 DOWN 1 RIGHT SUD EAST EAST 2 UP 1 RIGHT
    NORTH OVEST OVEST OVEST OVEST
    SUD SUD SUD SUD SUD SUD
    EAST EAST EAST EAST NEXT_CHAR ;

: !F ( color, addr -- color, addr )
    2 DOWN 1 RIGHT SUD EAST EAST 2 UP 1 RIGHT
    NORTH OVEST OVEST OVEST OVEST
    SUD SUD SUD SUD SUD SUD
    4 RIGHT NEXT_CHAR ;

: !G ( color, addr -- color, addr )
    1 DOWN 3 RIGHT EAST NORTHOVEST OVEST OVEST
    SUDOVEST SUD SUD SUD SUD
    SUDEAST EAST EAST EAST
    NORTH NORTH NORTH OVEST OVEST
    3 DOWN 2 RIGHT NEXT_CHAR ;

: !H ( color, addr -- color, addr )
    2DUP 4DUP !
    SUD SUD SUD SUD SUD SUD 2DROP
    2 DOWN 1 RIGHT SUD EAST EAST 2DROP
    3 RIGHT EAST SUD SUD SUD SUD SUD SUD
    NEXT_CHAR ;

: !I ( color, addr -- color, addr )
    EAST EAST EAST SUDOVEST
    SUD SUD SUD SUD SUDOVEST
    EAST EAST 1 RIGHT NEXT_CHAR ;

: !J ( color, addr -- color, addr )
    1 RIGHT EAST EAST EAST SUDOVEST
    SUD SUD SUD SUD SUDOVEST
    OVEST NORTHOVEST 1 DOWN 4 RIGHT NEXT_CHAR ;

: !K ( color, addr -- color, addr )
    2DUP 2DUP !
    SUD SUD SUD SUD SUD SUD 2DROP
    3 RIGHT EAST SUDOVEST SUDOVEST SUDOVEST
    SUDEAST SUDEAST SUDEAST NEXT_CHAR ;

: !L ( color, addr -- color, addr )
    2DUP ! SUD SUD SUD SUD SUD SUD
    EAST EAST EAST EAST NEXT_CHAR ;

: !M ( color, addr -- color, addr )
    7 DOWN
    NORTH NORTH NORTH NORTH NORTH NORTH NORTH
    SUDEAST SUDEAST SUD NORTH NORTHEAST NORTHEAST
    SUD SUD SUD SUD SUD SUD NEXT_CHAR ;

: !N ( color, addr -- color, addr )
    2DUP 4DUP !
    SUD SUD SUD SUD SUD SUD 2DROP
    1 DOWN 1 RIGHT SUD SUDEAST SUDEAST 2DROP
    3 RIGHT EAST SUD SUD SUD SUD SUD SUD
    NEXT_CHAR ;

: !O ( color, addr -- color, addr )
    4 RIGHT OVEST OVEST OVEST SUDOVEST
    SUD SUD SUD SUD SUDEAST EAST EAST
    NORTHEAST NORTH NORTH NORTH NORTH
    5 DOWN NEXT_CHAR ;

: !P ( color, addr -- color, addr )
    2DUP 2DUP !
    EAST EAST EAST SUDEAST SUD
    SUDOVEST OVEST OVEST 2DROP
    SUD SUD SUD SUD SUD SUD
    4 RIGHT NEXT_CHAR ;

: !Q ( color, addr -- color, addr )
    5 DOWN 2 RIGHT SUD OVEST NORTHOVEST
    NORTH NORTH NORTH NORTH
    NORTHEAST EAST EAST SUDEAST
    SUD SUD SUD SUDOVEST
    NORTHOVEST SUDEAST SUDEAST
    NEXT_CHAR ;

: !R ( color, addr -- color, addr )
    2DUP 2DUP !
    SUD SUD SUD SUD SUD SUD 2DROP
    EAST EAST EAST SUDEAST SUD
    SUDOVEST OVEST OVEST
    SUDEAST SUDEAST SUDEAST NEXT_CHAR ;

: !S ( color, addr -- color, addr )
    1 DOWN 4 RIGHT NORTH OVEST OVEST OVEST
    SUDOVEST SUD SUDEAST EAST EAST
    SUDEAST SUD SUDOVEST OVEST OVEST OVEST
    4 RIGHT NEXT_CHAR ;

: !T ( color, addr -- color, addr )
    2DUP 2DUP !
    EAST EAST EAST EAST 2DROP
    1 DOWN 1 RIGHT EAST SUD SUD SUD SUD SUD
    2 RIGHT NEXT_CHAR ;

: !U ( color, addr -- color, addr )
    2DUP ! SUD SUD SUD SUD SUD
    SUDEAST EAST EAST NORTHEAST
    NORTH NORTH NORTH NORTH NORTH
    6 DOWN NEXT_CHAR ;

: !V ( color, addr -- color, addr )
    2DUP ! SUD SUD SUD SUD
    SUDEAST SUDEAST NORTHEAST NORTHEAST
    NORTH NORTH NORTH NORTH
    6 DOWN NEXT_CHAR ;

: !W ( color, addr -- color, addr )
    2DUP 2DUP ! 2 DOWN 2 RIGHT SUD SUD 2DROP
    SUD SUD SUD SUD SUD
    SUDEAST NORTHEAST SUDEAST NORTHEAST
    NORTH NORTH NORTH NORTH NORTH
    6 DOWN NEXT_CHAR ;

: !X ( color, addr -- color, addr )
    2DUP 2DUP !
    3 RIGHT EAST SUD SUDOVEST SUDOVEST
    SUDOVEST SUDOVEST SUD 2DROP
    SUD SUDEAST SUDEAST
    SUDEAST SUDEAST SUD NEXT_CHAR ;

: !Y ( color, addr -- color, addr )
    2DUP 2DUP ! SUD SUD
    SUDEAST SUDEAST NORTHEAST NORTHEAST
    NORTH NORTH 2DROP
    5 DOWN 1 RIGHT EAST SUD 2 RIGHT NEXT_CHAR ;

: !Z ( color, addr -- color, addr )
    2DUP ! EAST EAST EAST EAST SUD
    SUDOVEST SUDOVEST SUDOVEST SUDOVEST
    SUD EAST EAST EAST EAST NEXT_CHAR ;

: ![ ( color, addr -- color, addr )
    4 RIGHT OVEST OVEST OVEST
    SUD SUD SUD SUD SUD SUD
    EAST EAST 1 RIGHT NEXT_CHAR ;

: !\ ( color, addr -- color, addr )
    SUD SUDEAST SUDEAST SUDEAST SUDEAST
    1 DOWN NEXT_CHAR ;

: !] ( color, addr -- color, addr )
    EAST EAST EAST SUD SUD SUD SUD SUD SUD
    OVEST OVEST 3 RIGHT NEXT_CHAR ;

: !^ ( color, addr -- color, addr )
    1 DOWN SUD NORTHEAST NORTHEAST
    SUDEAST SUDEAST 4 DOWN NEXT_CHAR ;

: !_ ( color, addr -- color, addr )
    5 DOWN SUD EAST EAST EAST EAST NEXT_CHAR ;

: !` ( color, addr -- color, addr )
    EAST SUDEAST SUDEAST 4 DOWN 1 RIGHT NEXT_CHAR ;

: _a ( color, addr -- color, addr )
    1 DOWN SUDEAST EAST EAST SUDEAST
    SUD SUD NORTHOVEST OVEST OVEST
    SUDOVEST SUDEAST EAST EAST EAST
    NEXT_CHAR ;

: _b ( color, addr -- color, addr )
    2DUP ! SUD SUD SUD SUD SUD SUD
    EAST EAST EAST NORTHEAST
    NORTH NORTH NORTHOVEST OVEST
    SUDOVEST 3 DOWN 3 RIGHT NEXT_CHAR ;

: _c ( color, addr -- color, addr )
    1 DOWN 3 RIGHT SUD OVEST OVEST SUDOVEST
    SUD SUD SUDEAST EAST EAST
    NORTHEAST 1 DOWN NEXT_CHAR ;

: _d ( color, addr -- color, addr )
    3 RIGHT EAST SUD SUD SUD SUD SUD SUD
    OVEST OVEST OVEST NORTHOVEST
    NORTH NORTH NORTHEAST EAST SUDEAST
    3 DOWN 1 RIGHT NEXT_CHAR ;

: _e ( color, addr -- color, addr )
    2 DOWN SUD NORTHEAST EAST EAST
    SUDEAST SUD OVEST OVEST OVEST OVEST
    SUD SUDEAST EAST EAST 1 RIGHT NEXT_CHAR ;

: _f ( color, addr -- color, addr )
    4 RIGHT SUD NORTHOVEST OVEST SUDOVEST
    SUD SUDOVEST EAST EAST SUDOVEST
    SUD SUD 3 RIGHT NEXT_CHAR ;

: _g ( color, addr -- color, addr )
    3 DOWN 3 RIGHT EAST NORTH NORTH OVEST OVEST OVEST
    SUDOVEST SUD SUDEAST EAST EAST EAST SUD
    SUDOVEST OVEST OVEST 3 RIGHT NEXT_CHAR ;

: _h ( color, addr -- color, addr )
    2DUP ! SUD SUD SUD SUD SUD SUD 2 UP
    NORTHEAST NORTHEAST EAST SUDEAST
    SUD SUD SUD NEXT_CHAR ;

: _i ( color, addr -- color, addr )
    1 RIGHT EAST 1 DOWN SUDOVEST EAST
    SUD SUD SUD SUDOVEST EAST EAST
    1 RIGHT NEXT_CHAR ;

: _j ( color, addr -- color, addr )
    2 RIGHT EAST 1 DOWN SUDOVEST EAST
    SUD SUD SUD SUDOVEST OVEST
    NORTHOVEST 1 DOWN 4 RIGHT NEXT_CHAR ;

: _k ( color, addr -- color, addr )
    2DUP 2DUP ! SUD SUD SUD SUD SUD SUD
    2DROP 1 DOWN 3 RIGHT SUD SUDOVEST SUDOVEST
    SUDEAST SUDEAST 1 RIGHT NEXT_CHAR ;

: _l ( color, addr -- color, addr )
    EAST EAST SUD SUD SUD SUD SUD
    SUDOVEST EAST EAST 1 RIGHT NEXT_CHAR ;

: _m ( color, addr -- color, addr )
    7 DOWN NORTH NORTH NORTH NORTH NORTH
    EAST SUDEAST SUD NORTH NORTHEAST
    SUDEAST SUD SUD SUD NEXT_CHAR ;

: _n ( color, addr -- color, addr )
    7 DOWN NORTH NORTH NORTH NORTH NORTH
    SUDEAST NORTHEAST EAST SUDEAST
    SUD SUD SUD NEXT_CHAR ;

: _o ( color, addr -- color, addr )
    5 DOWN 3 RIGHT EAST NORTH NORTH NORTHOVEST
    OVEST OVEST SUDOVEST SUD SUD SUDEAST
    EAST EAST 1 RIGHT NEXT_CHAR ;

: _p ( color, addr -- color, addr )
    7 DOWN NORTH NORTH NORTH NORTH NORTH
    EAST EAST EAST SUDEAST SUDOVEST
    OVEST OVEST 2 DOWN 3 RIGHT NEXT_CHAR ;

: _q ( color, addr -- color, addr )
    3 DOWN 2 RIGHT SUDEAST OVEST OVEST NORTHOVEST
    NORTHEAST EAST SUDEAST NORTHEAST
    SUD SUD SUD SUD NEXT_CHAR ;

: _r ( color, addr -- color, addr )
    7 DOWN NORTH NORTH NORTH NORTH NORTH
    SUDEAST NORTHEAST EAST SUDEAST
    3 DOWN NEXT_CHAR ;

: _s ( color, addr -- color, addr )
    1 DOWN 3 RIGHT SUD OVEST OVEST SUDOVEST
    SUDEAST EAST EAST SUDEAST SUDOVEST
    OVEST OVEST OVEST 4 RIGHT NEXT_CHAR ;

: _t ( color, addr -- color, addr )
    EAST SUD SUDOVEST EAST EAST SUDOVEST
    SUD SUD SUDEAST EAST NORTHEAST
    1 DOWN NEXT_CHAR ;

: _u ( color, addr -- color, addr )
    1 DOWN SUD SUD SUD SUD SUDEAST EAST
    NORTHEAST SUDEAST NORTH NORTH
    NORTH NORTH 4 DOWN NEXT_CHAR ;

: _v ( color, addr -- color, addr )
    1 DOWN SUD SUD SUD SUDEAST SUDEAST
    NORTHEAST NORTHEAST NORTH NORTH
    4 DOWN NEXT_CHAR ;

: _w ( color, addr -- color, addr )
    1 DOWN SUD SUD SUD SUD SUDEAST
    NORTHEAST NORTH SUD SUDEAST NORTHEAST
    NORTH NORTH NORTH 4 DOWN NEXT_CHAR ;

: _x ( color, addr -- color, addr )
    2DUP 1 DOWN 4 RIGHT SUD SUDOVEST SUDOVEST
    SUDOVEST SUDOVEST 2DROP 1 DOWN SUD
    SUDEAST SUDEAST SUDEAST SUDEAST NEXT_CHAR ;

: _y ( color, addr -- color, addr )
    1 DOWN SUD SUD SUDEAST EAST EAST
    NORTHEAST NORTH SUD SUD SUD SUDOVEST
    OVEST OVEST 3 RIGHT NEXT_CHAR ;

: _z ( color, addr -- color, addr )
    1 DOWN SUD EAST EAST EAST EAST
    SUDOVEST SUDOVEST SUDOVEST SUDOVEST
    EAST EAST EAST EAST NEXT_CHAR ;

: !{ ( color, addr -- color, addr )
    2 RIGHT EAST SUDOVEST SUD SUDOVEST
    SUDEAST SUD SUDEAST 1 RIGHT NEXT_CHAR ;

: !| ( color, addr -- color, addr )
    1 RIGHT EAST SUD SUD SUD SUD SUD SUD
    2 RIGHT NEXT_CHAR ;

: !} ( color, addr -- color, addr )
    EAST SUDEAST SUD SUDEAST SUDOVEST
    SUD SUDOVEST 3 RIGHT NEXT_CHAR ;

\******************************* COMMAND
CREATE ASCII  ' SP , ' !! , ' QM , ' !# , ' !$ , ' !% ,
' !& , ' !' , ' !( , ' !) , ' !* , ' !+ , ' !, , ' !- ,
' !. , ' !/ , ' !0 , ' !1 , ' !2 , ' !3 , ' !4 , ' !5 ,
' !6 , ' !7 , ' !8 , ' !9 , ' !: , ' !; , ' !< , ' != ,
' !> , ' !? , ' !@ , ' !A , ' !B , ' !C , ' !D , ' !E ,
' !F , ' !G , ' !H , ' !I , ' !J , ' !K , ' !L , ' !M ,
' !N , ' !O , ' !P , ' !Q , ' !R , ' !S , ' !T , ' !U ,
' !V , ' !W , ' !X , ' !Y , ' !Z , ' ![ , ' !\ , ' !] ,
' !^ , ' !_ , ' !` , ' _a , ' _b , ' _c , ' _d , ' _e ,
' _f , ' _g , ' _h , ' _i , ' _j , ' _k , ' _l , ' _m ,
' _n , ' _o , ' _p , ' _q , ' _r , ' _s , ' _t , ' _u ,
' _v , ' _w , ' _x , ' _y , ' _z , ' !{ , ' !| , ' !} ,

: WRITE_PREPARE ( -- color addr ) COLOR @ POINTER @ ;

: ASCII_COMPILE ( ascii -- )
    ASCII SWAP 20 - 4 * + @ WRITE_PREPARE ROT EXECUTE POINTER ! COLOR ! ;

: PRINT_HDMI ( addr len -- )
    0 HDMI_COUNTER ! STR_LEN ! >R
    BEGIN RSP@ @ HDMI_COUNTER @ + C@ ASCII_COMPILE HDMI_COUNTER
    INCREMENT_RETURN STR_LEN @ = UNTIL R> DROP ;

: SELECT_COLOR ( color -- ) COLOR ! ;

: SELECT_POINT ( x y --  ) 400 * + 4 * FRAMEBUFFER_HDMI + POINTER ! ;

: POINT_INITIALIZZATION (  --  ) 0 0 SELECT_POINT POINTER @ ROW ! ;

CREATE SCROLL
\00008000 <_start>:
e59f701c ,	\ldr	r7, [pc, #28]	; 8024 <addr_FRAMEBUFFER>
e2877801 ,	\add	r7, r7, #65536	; 0x10000
e59f9018 ,	\ldr	r9, [pc, #24]	; 8028 <addr_LIMIT>
e59f8010 ,	\ldr	r8, [pc, #16]	; 8024 <addr_FRAMEBUFFER>
\00008010 <_loop>:
e8b7007f ,	\ldm	r7!, {r0, r1, r2, r3, r4, r5, r6}
e8a8007f ,	\stmia	r8!, {r0, r1, r2, r3, r4, r5, r6}
e1570009 ,	\cmp	r7, r9
9afffffb ,	\bls	8010 <_loop>
e12fff1e ,	\bx	lr
\DATA
FRAMEBUFFER_HDMI ,
3EBEA000 ,
DOES> JSR ;

: SCROLLING ( -- ) SCROLL DROP ;

: HDMI_PAGE ( -- ) 2F BEGIN SCROLLING 1 - DUP 0= UNTIL DROP POINT_INITIALIZZATION ;

: HDMI_RETURN ( -- )
    ROW @ 10000 + ROW !
    ROW @ MAXROW = IF ROW @ 10000 - ROW ! SCROLLING ROW @ POINTER !
    ELSE ROW @ POINTER ! THEN ;

: HDMI_INIT ( -- ) FFFFFF SELECT_COLOR POINT_INITIALIZZATION ;

: PRESENTATION S" Progetto Sistemi Embedded: Federico Guida - Giovanni Raccuglia - Alessio Princiotta" PRINT_HDMI HDMI_RETURN  ;
: LED_RED 13 ;
: LED_GREEN D ;
: LED_BLUE 1A ;
: LED_RGB
    LED_GREEN GPFSEL GPIO_OUTPUT
    LED_RED GPFSEL GPIO_OUTPUT
    LED_BLUE GPFSEL GPIO_OUTPUT
    LED_RED GPOFF
    LED_GREEN GPON
    LED_BLUE GPON ;
VARIABLE LOG_COUNTER
VARIABLE CRCBUFFER
CREATE USERLOG A CELLS ALLOT
CREATE USERLOGTIME A CELLS ALLOT
CREATE FLAG A CELLS ALLOT \modificato

: USERLOG_INIT ( -- ) 0 CRCBUFFER ! ;

: CREATE_STRING ( usercode flag -- addr len ) \modificato
    DUP 0 = IF S" USER ___ LOGGED SUCCESSFULLY " ELSE
    DUP 1 = IF S" USER ___ PASSWORD WRONG! " THEN THEN
    ROT DROP SWAP >R SWAP
    DUP 100 / DUP 100 * ROT SWAP - DUP 10 / DUP 10 * ROT SWAP -
    30 + RSP@ @  7 + C! 30 + RSP@ @  6 + C! 30 + RSP@ @  5 + C!
    R> SWAP ;

: REGISTER_LOG ( usercode addr_time flag -- ) \modificato
    FLAG CRCBUFFER @ A MOD CELLS + !
    USERLOGTIME CRCBUFFER @ A MOD CELLS + !
    USERLOG CRCBUFFER @ A MOD CELLS + !
    CRCBUFFER INCREMENT ;

: PRINT_LOG ( usercode -- ) \ modificato
    0 LOG_COUNTER ! >R
    BEGIN
        USERLOG LOG_COUNTER @ CELLS + @ DUP RSP@ @ =
        IF FLAG LOG_COUNTER @ CELLS + @ CREATE_STRING PRINT_HDMI
        USERLOGTIME LOG_COUNTER @ CELLS + @ 10 PRINT_HDMI HDMI_RETURN
        ELSE DROP THEN
        LOG_COUNTER INCREMENT_RETURN A =
    UNTIL R> DROP ;
VARIABLE SECURITY_COUNTER
VARIABLE SECURITY_TEMP
100 CONSTANT USER_MAX

CREATE USERS USER_MAX 1 - CELLS ALLOT
CREATE PASSWORD USER_MAX 1 - CELLS ALLOT

: ARRAY_INIT ( addr -- )
    0 SECURITY_COUNTER !
    SECURITY_TEMP !
    BEGIN 0 SECURITY_TEMP @ SECURITY_COUNTER @ CELLS + !
    SECURITY_COUNTER INCREMENT_RETURN USER_MAX 1 - = UNTIL ;

: USER_CODE ( val1 val2 val3 -- usercode )
    SWAP 10 * OR SWAP 100 * OR ;

: PASSWORD_CODE ( val1 val2 val3 val4 val5 val6 -- passcode )
    SWAP 10 * OR SWAP 100 * OR SWAP 1000 * OR SWAP 10000 * OR SWAP 100000 * OR ;

: USERCODE_CONTROL ( val1 val2 val3 -- usercode flag )
    3 SECURITY_COUNTER !
    BEGIN ATOI DUP A < >R -ROT
    SECURITY_COUNTER DECREMENT SECURITY_COUNTER @ 0 = UNTIL
    USER_CODE
    R> R> R> AND AND >R DUP 0 > R> AND ;

: PASSCODE_CONTROL ( val1 val2 val3 val4 val5 val6 -- passcode flag )
    6 SECURITY_COUNTER !
    BEGIN ATOI DUP A < >R -6ROT
    SECURITY_COUNTER DECREMENT SECURITY_COUNTER @ 0 = UNTIL
    PASSWORD_CODE
    R> R> R> R> R> R> AND AND AND AND AND ;

: INLIST ( code -- flag )
    0 SECURITY_COUNTER !
    BEGIN USERS SECURITY_COUNTER @ CELLS + @ SECURITY_COUNTER INCREMENT
    SWAP DUP ROT = IF DROP SECURITY_COUNTER @ 1 - SECURITY_TEMP ! RETURN_TRUE ELSE
    SECURITY_COUNTER @ USER_MAX 1 - = IF DROP RETURN_FALSE ELSE 0
    THEN THEN  1 = UNTIL ;

: USER_REGISTER ( code -- flag )
    0 SECURITY_COUNTER !
    BEGIN USERS SECURITY_COUNTER @ CELLS + @ SECURITY_COUNTER INCREMENT
    0 = IF USERS SECURITY_COUNTER @ 1 - CELLS + ! SECURITY_COUNTER @ 1 - SECURITY_TEMP !
    RETURN_TRUE ELSE
    SECURITY_COUNTER @ USER_MAX 1 - = IF DROP RETURN_FALSE ELSE 0
    THEN THEN 1 = UNTIL ;

: PASSWORD_REGISTER ( passcode -- )
    PASSWORD SECURITY_TEMP @ CELLS + ! ;

: PASSWORD_CONTROL ( passcode -- flag )
    PASSWORD SECURITY_TEMP @ CELLS + @ = ;

: USER_DELETE ( value -- )
    DUP USERS SECURITY_TEMP @ CELLS + !
    PASSWORD SECURITY_TEMP @ CELLS + ! ;

: CREDENTIAL_CHECK ( -- user_code password_code flag )
    3 0 READ_VALUES
    DISPLAY_R2 S" PASS: " SEND_STRING
    6 1 READ_VALUES
    PASSCODE_CONTROL
    >R >R
    USERCODE_CONTROL
    R> SWAP R> AND
    CLEAR_DISPLAY ;

: SEND_LOG ( flag -- ) \ modificato
    >R USERS SECURITY_TEMP @ CELLS + @ DATETIME
    -ROT 2DUP RSP@ @ REGISTER_LOG SWAP R>
    CREATE_STRING PRINT_HDMI SWAP PRINT_HDMI HDMI_RETURN ;

\**********FUNZIONALITA' PRINCIPALI**********

: SYSTEMSECURITY_INIT ( -- )
    USERS ARRAY_INIT
    PASSWORD ARRAY_INIT
    KEYPAD_INIT
    BSC1_ENABLE
    INIT_LCD
    HDMI_INIT
    USERLOG_INIT ;

: CONFIGURATION ( -- )
    SYSTEMSECURITY_INIT
    999 USERS !
    BEGIN
    1 SEC_TIMES
    S" ADMIN CONFIG" SEND_STRING DISPLAY_R2
    S" ROOT PASS:" SEND_STRING
    6 1 READ_VALUES
    PASSCODE_CONTROL CLEAR_DISPLAY
    IF PASSWORD !
    S" CONFIGURATION" SEND_STRING DISPLAY_R2 S" COMPLETED" SEND_STRING
    1 ELSE S" PASSWORD" SEND_STRING DISPLAY_R2 S" NOT VALID!" SEND_STRING
    1 SEC_TIMES CLEAR_DISPLAY
    DROP 0 THEN 1 = UNTIL LED_RGB ;

: LOGIN ( -- ) \modificato
    1 SEC_TIMES
    CLEAR_DISPLAY S" USER: " SEND_STRING
    CREDENTIAL_CHECK IF
    SWAP INLIST
    1 = IF PASSWORD_CONTROL
    IF 0 SEND_LOG
    S" WELCOME!" SEND_STRING
    LED_RED GPOFF 2 SEC_TIMES LED_RED GPON
    ELSE 1 SEND_LOG
    S" PASSWORD WRONG!" SEND_STRING
    LED_GREEN GPOFF 2 SEC_TIMES LED_GREEN GPON THEN
    ELSE S" USER NOT" SEND_STRING DISPLAY_R2
    S" REGISTER!" SEND_STRING DROP THEN
    ELSE S" USER OR PASSWORD" SEND_STRING DISPLAY_R2
    S" NOT VALID!" SEND_STRING 2DROP THEN ;

: REGISTRATION ( -- )
    1 SEC_TIMES
    CLEAR_DISPLAY S" ADMIN USER: " SEND_STRING
    CREDENTIAL_CHECK IF
    SWAP USERS @ = SWAP PASSWORD @ = AND IF
    S" USER: " SEND_STRING
    CREDENTIAL_CHECK IF
    SWAP DUP INLIST 0 = IF USER_REGISTER
    1 = IF S" REGISTRATION" SEND_STRING DISPLAY_R2
    S" COMPLETED" SEND_STRING PASSWORD_REGISTER
    ELSE S" OUTSIZE!" SEND_STRING 2DROP THEN
    ELSE S" EXISTING USER!" SEND_STRING 2DROP THEN
    ELSE S" USER OR PASSWORD" SEND_STRING DISPLAY_R2
    S" NOT VALID!" SEND_STRING 2DROP THEN
    ELSE S" ACCESS DENIED" SEND_STRING THEN
    ELSE S" USER OR PASSWORD" SEND_STRING DISPLAY_R2
    S" NOT VALID!" SEND_STRING 2DROP THEN ;

: DELETE ( -- )
    1 SEC_TIMES
    CLEAR_DISPLAY S" ADMIN USER: " SEND_STRING
    CREDENTIAL_CHECK IF
    SWAP USERS @ = SWAP PASSWORD @ = AND IF
    S" USER: " SEND_STRING
    3 0 READ_VALUES
    USERCODE_CONTROL CLEAR_DISPLAY IF
    INLIST 1 = IF 0 USER_DELETE
    S" USER DELETED!" SEND_STRING
    ELSE S" USER DOES" SEND_STRING DISPLAY_R2
    S" NOT EXIST" SEND_STRING THEN
    ELSE S" USER NOT VALID!" SEND_STRING 2DROP THEN
    ELSE S" ACCESS DENIED" SEND_STRING THEN
    ELSE S" USER OR PASSWORD" SEND_STRING DISPLAY_R2
    S" NOT VALID!" SEND_STRING 2DROP THEN ;

: LOG ( -- )
    1 SEC_TIMES
    CLEAR_DISPLAY S" ADMIN USER: " SEND_STRING
    CREDENTIAL_CHECK IF
    SWAP USERS @ = SWAP PASSWORD @ = AND IF
    S" USER: " SEND_STRING
    3 0 READ_VALUES
    USERCODE_CONTROL IF
    HDMI_RETURN S" --------------USER LOG HISTORY--------------" PRINT_HDMI HDMI_RETURN
    PRINT_LOG S" --------------------END---------------------" PRINT_HDMI HDMI_RETURN
    ELSE S" USER NOT VALID!" SEND_STRING 2DROP THEN
    ELSE S" ACCESS DENIED" SEND_STRING THEN
    ELSE S" USER OR PASSWORD" SEND_STRING DISPLAY_R2
    S" NOT VALID!" SEND_STRING 2DROP THEN ;

: MAIN ( -- )
    2 SEC_TIMES
    CLEAR_DISPLAY
    S" WELCOME TO THE" SEND_STRING DISPLAY_R2
    S" SECURITY SYSTEM" SEND_STRING
    LED_RED GPON
    BEGIN
    2 SEC_TIMES
    CLEAR_DISPLAY
\*******************************************************/
    CR CR ." DEBUG INFORMATION"
    CR ." USERS: " USERS 1 CELLS + ? USERS 2 CELLS + ?
    CR ." PASSWORD: " PASSWORD 1 CELLS + ? PASSWORD 2 CELLS + ?
    CR ." STACK: " .S CR
\*******************************************************/
    S" A.LOGIN C.DELETE" SEND_STRING DISPLAY_R2
    S" B.ENTRY D.LOG  " SEND_STRING
    1 0 READ_VALUES
    DUP 41 = IF LOGIN 0 SWAP ELSE
    DUP 42 = IF REGISTRATION 0 SWAP ELSE
    DUP 43 = IF DELETE 0 SWAP ELSE
    DUP 44 = IF LOG 0 SWAP ELSE
    DUP 23 = IF 1 SWAP CR ELSE
    CLEAR_DISPLAY S" ERROR!" SEND_STRING
    THEN THEN THEN THEN THEN DROP
    1 = UNTIL ;

: BOOT ( -- ) CONFIGURATION SCROLLING SCROLLING PRESENTATION MAIN ;
